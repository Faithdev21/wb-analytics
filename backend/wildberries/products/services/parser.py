import requests

from api.constants import ZERO, HUNDRED, DEFAULT_SPP, DELAY, START_PAGE
from products.models import Product
import time


def extract_price_from_sizes(sizes):
    """
    –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç sizes –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–Ω—É—é —Ü–µ–Ω—É –∏ —Å–∫–∏–¥–∫—É.
    """
    for size in sizes:
        price_data = size.get("price")
        if price_data:
            basic_price = price_data.get("basic", ZERO) / HUNDRED
            discount_price = price_data.get("product", ZERO) / HUNDRED
            if basic_price > ZERO and discount_price > ZERO:
                return basic_price, discount_price
    return 0, 0


def parse_products(keyword="—Å–º–∞—Ä—Ç—Ñ–æ–Ω", dest="-1257786", spp=DEFAULT_SPP, delay=DELAY):
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã Wildberries –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Ç–æ–≤–∞—Ä—ã.
    """
    Product.objects.all().delete()
    print(f"üßπ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {Product.objects.count()}")
    headers = {
        'User-Agent': (
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
            'AppleWebKit/537.36 (KHTML, like Gecko) '
            'Chrome/122.0.0.0 Safari/537.36'
        )
    }

    total_saved = 0
    page = START_PAGE

    while True:
        print(f"\nüîç –ü–∞—Ä—Å–∏–º ¬´{keyword}¬ª, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
        url = 'https://search.wb.ru/exactmatch/ru/common/v5/search'
        params = {
            'query': keyword,
            'page': page,
            'sort': 'popular',
            'resultset': 'catalog',
            'spp': spp,
            'dest': dest,
        }

        try:
            response = requests.get(url, headers=headers, params=params, timeout=10)
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            break

        if response.status_code != 200:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            break

        try:
            data = response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            break

        products = data.get("data", {}).get("products", [])
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(products)}")

        if not products:
            print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω: –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
            break

        for item in products:
            name = item.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            wb_id = item.get("id")

            if not wb_id:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä –±–µ–∑ ID: {name}")
                continue

            sizes = item.get("sizes", [])
            price, discount_price = extract_price_from_sizes(sizes)

            if price == 0 or discount_price == 0:
                print(f"‚õî –ü—Ä–æ–ø—É—â–µ–Ω –±–µ–∑ —Ü–µ–Ω—ã: {name}")
                continue

            rating = item.get("reviewRating", 0.0)
            reviews = item.get("feedbacks", ZERO)

            obj, created = Product.objects.update_or_create(
                wb_id=wb_id,
                defaults={
                    'name': name,
                    'price': price,
                    'discount_price': discount_price,
                    'rating': rating,
                    'review_count': reviews
                }
            )

            action = "‚ú® –î–æ–±–∞–≤–ª–µ–Ω" if created else "üîÅ –û–±–Ω–æ–≤–ª—ë–Ω"
            print(f"{action}: {name} | {price}‚ÇΩ ‚Üí {discount_price}‚ÇΩ | ‚òÖ {rating} | üí¨ {reviews}")
            total_saved += 1

        page += 1
        time.sleep(delay)

    print(f"\n‚úÖ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_saved}")
